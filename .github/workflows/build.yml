name: Build Docker Image

# 当 push 到 master 分支，或者创建以 v 开头的 tag 时触发，可根据需求修改
on:
  # 手动触发事件
  workflow_dispatch: {}
  push:
    branches:
      - master
  schedule:
    # 每周二早上10点运行
    - cron: '0 10 * * 2'

env:
  REGISTRY: ghcr.io
  REGISTRY_CODING: liziwl-docker.pkg.coding.net
  IMAGE_NAME: texlive-full-with-fonts

jobs:
  build-and-push:
    name: "Build and push ghcr images"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        texlive: [latest, TL2022-historic, TL2021-historic, TL2020-historic, TL2019-historic]
        # 多版本 TexLive
        # 版本号选自：https://hub.docker.com/r/texlive/texlive/tags
    permissions:
      # 这里用于定义 GITHUB_TOKEN 的权限
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # 登录到 GitHub Packages 容器仓库
      # 注意 secrets.GITHUB_TOKEN 不需要手动添加，直接就可以用
      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 根据输入自动生成 tag 和 label 等数据，说明见下
      - name: Extract metadata for Container
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}
          tags: ${{ matrix.texlive }}

      # 构建并上传
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            TEXLIVE_TAG=${{ matrix.texlive }}

      - name: Inspect image
        run: |
          docker buildx imagetools inspect \
          ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

      - name: Log in to the Coding Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_CODING }}
          username: ${{ secrets.CODING_CR_USER }}
          password: ${{ secrets.CODING_CR_PASSWORD }}

      - name: Sync to registry in China
        run: |
          docker tag ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
          ${{ env.REGISTRY_CODING }}/container-registry/main/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          docker push ${{ env.REGISTRY_CODING }}/container-registry/main/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  clean-untagged-images:
    name: "Clean untagged images"
    runs-on: ubuntu-latest
    if: always()
    needs: build-and-push
    steps:
      - name: Delete all containers from repository without tags
        continue-on-error: true
        uses: Chizkiyahu/delete-untagged-ghcr-action@v2
        with:
            token: ${{ secrets.PAT_TOKEN }}
            repository_owner: ${{ github.repository_owner }}
            repository: ${{ github.repository }}
            untagged_only: true
            owner_type: user
